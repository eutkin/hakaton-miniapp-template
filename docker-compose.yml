services:
  caddy-proxy:
    image: caddy:2-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - spa
      - static
      - bff
      - alloy
    networks:
      - app-network

  spa:
    build:
      context: ./spa
      dockerfile: Dockerfile
    environment:
      - VITE_BFF_URL=http://bff:3001
      - VITE_OIDC_AUTHORITY=${OIDC_AUTHORITY:-https://your-sso-provider.com}
      - VITE_OIDC_CLIENT_ID=${OIDC_CLIENT_ID:-your-client-id}
      - VITE_OIDC_REDIRECT_URI=${OIDC_REDIRECT_URI:-http://localhost/callback}
      - VITE_FARO_URL=/faro/collect
    networks:
      - app-network

  static:
    build:
      context: ./static
      dockerfile: Dockerfile
    networks:
      - app-network

  bff:
    build:
      context: ./bff
      dockerfile: Dockerfile
    environment:
      - PORT=3001
      - MOCK_API_URL=http://mock-api:3002
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://alloy:4317
      - OTEL_SERVICE_NAME=bff
      - DENO_OTEL=true
      - OTEL_DENO_CONSOLE=ignore
    depends_on:
      - mock-api
      - alloy
    networks:
      - app-network

  mock-api:
    build:
      context: ./mock-api
      dockerfile: Dockerfile
    environment:
      - PORT=3002
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://alloy:4318
      - DENO_OTEL=true
      - OTEL_DENO_CONSOLE=ignore
      - OTEL_SERVICE_NAME=mock-api
    networks:
      - app-network

  # =============== OBSERVABILITY BACKENDS ===============

  # Tempo: хранение трассировок
  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./observability/tempo.yaml:/etc/tempo.yaml:ro
      - tempo_data:/var/tempo
    ports:
      - "3200:3200"   #   HTTP
      - "9095:9095"   # gRPC
    restart: unless-stopped
    networks:
      - app-network

  # Loki: хранение логов
  loki:
    image: grafana/loki:latest
    volumes:
      - loki_data:/var/loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    restart: unless-stopped
    networks:
      - app-network
      - otlp-network

  # Mimir: хранение метрик
  mimir:
    image: grafana/mimir:latest
    volumes:
      - ./observability/mimir.yaml:/etc/mimir/config.yaml:ro
      - mimir_data:/var/mimir
    command: -config.file=/etc/mimir/config.yaml
    ports:
      - "9009:9009"   # HTTP (для Alloy)
      - "9005:9005"   # HTTP (для UI)
    restart: unless-stopped
    networks:
      - app-network
      - otlp-network

  # =============== GRAFANA ALLOY (агент сбора) ===============

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ./observability/alloy-config.alloy:/etc/alloy/config.alloy
    ports:
      - "12345:12345"
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    depends_on:
      - tempo
      - loki
      - mimir
    restart: unless-stopped
    networks:
      - app-network
      - otlp-network

  # =============== GRAFANA (UI) ===============

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      # Для быстрого старта — анонимный доступ
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      # Подключение датасорсов
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - otlp-network
      - app-network

volumes:
  caddy_data:
  caddy_config:
  tempo_data:
  mimir_data:
  grafana_data:
  loki_data:

networks:
  app-network:
    driver: bridge
  otlp-network:
    driver: bridge
